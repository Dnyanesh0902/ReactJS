12/03/2025

1. What is react js ?
	Ract JS is JavaScript library used for UI Purposes, Created and Maintained by meta.

It is the mosting demanding skill needed in current  trend


2. Requirements : HTML, CSS and JS(Variables, Datatypes, Loops, Condition statements, functions, array-- map, forEach, filter, reduce, promises, async await, DOM)


3. React VS Angular
	React is JS library (pre written code used for specific purpose). Angular is a framework (complete environment a developer needs)
	React is easy anf functional based. Angular uses class based techniques.
	React Supports one way data binding and angular supports two way data binding.
	React is like system which other items to be install libraries.

Angular is like technology where third part libraries are not needed.

React Js Course :- 

1. Course Duration :- 4:05-4:10 -- 5:40-5:45
2. Course Period :- 30 sessions
3. Course Topics:
	1. React Introduction(jsx, props, Components)
	2. Components
	3. Types Of Components
	4. LifeCycle Method
		-- lists & condtional rendering
	5. UseState, UseEffect
		context API
	6. forms
	7. routing
	8. hooks
	9. redux
	10. Realtime Project -- Basic Ecommerce or basic OTT

1. Do You All Have VScode? if not, please download and install
2. Do you all have nodejs? if not, please download and install
NodeJs Contains a package Manager called 'npm' (node
package Manager)
npm is used to install/ uninstall any packages of javascript you can verify using command prompt with "npm -v" for latest version : npm install npm@latest or npm install node@latest

3. What is a function in javascript ?
Function is a block of code to perform a specific task. The Main advantage of the function is reusability.
function function-name()
{
	console.log("hello World")
}
function-name()

4. What is the difference between normal function and arrow function ?

	//Normal Function
	function sum(a,b){
	return a+b;
	}
	sum(5,6)

	//arrow function

	const sum  = (a,b) =>  a+b;
	sum(5,6)

// arrow function not need to written return keyword.
	
5. How to use ES6 modules in javascript?
     Ecmascript provides "ES6" modules in 2015. it is used to share data from one JS file to another js file
  default exports and imports
           //x.js
          let a=25,b=35;  
         export default a;
         //y.js
         import a from 'x.js'
        console.log(a)
per one document, only one value default export is possible
named exports and imports:
      //x.js
          let a=25,b=35;  
         export default {a,b};
         //y.js
         import {a,b} from 'x.js'
        console.log(a,b)


13/03/2025


React is a open source JS library created and maintained by meta. React is used for better user Interface. 
React divides whole application/UI into multiple small reusable parts called components
React is also used to create single page applications

React was first released in 2013 by facebook(meta). it was initially used for building facebook news feed,later it was open sourced and its community got increased

Advantages of React:
 1. fast and efficient
 2. React code easy to understand and maintain(declarative code)
 3.React is a component based architecture used to build large and active community of developers
 
 How to start first react code?
  Don't use create-react-app

  1. open vs code --> open a folder -->open terminal --> new terminal --> cd folder-name --> 
  npm create vite@latest

  vite is a modern web developmenet build tool that provides fast and efficient way to build and serve web applications
    Enter project name--->select react--> javascript +Enter

    vite will scaffold all the folder with respective project name
    "cd projectName"
    "npm install"
    "npm run dev"

2. goto folder --> src---> App.jsx --> delete htl code and write new HTML code and save(cntrl+s) and verify output 

vite will run your code on every change called HMR(Hot module Reloading)
Folder Structure:
   vite installs many files and folders when creating react app. Each and every file folder descriptions are:

   i. vite.config.js -- it contains rules that vite bundler follows
   ii. Readme.md -- it contains instructions of our project.
   iii. package.json -- it contains meta data of your project
   iv. package.lock.json -- it contains met data of each library in node_modules
   iv. index.html -- it is the main HTML file
   v. eslint.cong.js -- used for error finding errors of every library
   vi. gitignore -- contains list of files or folders that needs to ignored by git
   vii. public -- contains all the files that needs to resourced(images,pdf,etc..,)
   viii. node_modules -- contains all the packages will be here
   ix. src -- contains all main jsx code
      main.jsx -- it is the main file to connect index.html and it renders
      App.jsx into index.html

      App.jsx -- it is a component that can be repreated multiple times




React JSX:  JSX stands for javascript xml, it is nothing but using HTML inside JS. JSX will return only one value. If you need to return more than one value, then keep the code inside a container element like div, section ,nav etc..,

React also gives an option of transparent container called Fragments. you can write fragmnets as empty brackets or React.fragment

Function component must starts name with uppercase letter and return JSX UI.
Components are used for reusability, modularity and flexibility
One component Inside another component is called Nested components

React JSX will use events as camelCase (eg: onClick), class should be written as className and HTML code should be between parenthesis () and JS code should be between {}




React Features: 
   1. components: React JS is completely about building reuable UI components. 
    Components are the Building blocks of React Application.
   2.  JSX: JSX is a syntax extension for javascript that allows you to write HTML inside JS
   3. virtual DOM: React uses a virtual DOM ( alightweight in-memory representation of the real DOM ) to update/optimize rendering and improve performance



17-03-2025



React Components are the building blocks of React application.
by default, React application creates a root component called App.
A component is a small, reusable piece of code that represents a UI element. components are flexible, modular and reusable
React Provides two kinds of components
 i. functional components:
    what is a functional component?
       functional component also called stateless component that are simple components which receives props and returns JSX.
    How to create our own functional components?
       create a file functional-component-name.jsx and add a function which return an UI and export the function
       const Header = () =>
       {
        return (
        <h2>My Website</h2>
        )
       } 
       export default Header
       It is recommanded to have same name for component similar to file name. 
    Inside SRC, create a file with properNAME(starts with uppercase letter), you can keep all pcomponents in one single application
    How to use functional components?
      import functional components into other components and use them as HTML elements
    nested components:
       A component inside another component is called nested component
          //App.jsx
          <Header />
     
     props: props are used to send the values from parent components to child component. props is shortform of "properties"
     we send properties as attributes and receives the properties as parameters of function
     eg:
       //App.jsx
       <Header name="PRASAD" />
       //Header.jsx
       function Header(props){
         return (
            <h2>{props.name}</p>
         )

       }

       props is always an object of properties

       state:  In React state refers to the data that changes within a component. state is an object that stores the components dynamic data.

        state is necessary because react components are designed for reusability and dynamic , when a component data changes, react will re render component to reflext the new data. state is used to keep track of the data and re render the component

        How to use state in functional components?
          functional components are called stateless components because they cannot implement state directly so they use a hook called useState
          import {useState} from 'react

          const [value,setValue]= useState(initialvalue)
          value -- data which is printing on screen
          setValue -- is a method to update state and re render the component
          initialvalue contains default value
          useState is a hook(function) provided by react

           eg: import react,{useState} from 'react'
           function Counter(){
            const [count,setCount]= useState(0);
            return(
               <div>
               <p>Count:{count}</p>
               <button onClick={()=>setCount(count+1)}>increment</button>
               </div>
            )
           }
          export default Counter;

 ii. class components: class components are the stateful components and they use render method to render the UI and for render method they use Component and extends It.
 In legacy code, class components have higher preference since they haveIn built state. Also they have default life cycle methods

  # React Class Components - Complete Guide

## What are Class Components?
Class components are ES6 classes that extend from React.Component and implement a render method. They were the primary way of creating components in React before hooks were introduced. Class components are also known as "stateful components" because they can maintain their own state.

## Basic Structure
import React, { Component } from 'react';

class MyComponent extends Component {
  render() {
    return (
      <div>
        <h1>Hello from Class Component</h1>
      </div>
    );
  }
}

export default MyComponent;
```

## Props in Class Components
Props are accessed using `this.props` in class components. They are available throughout the component.

class Greeting extends Component {
  render() {
    return <h1>Hello, {this.props.name}!</h1>;
  }
}

// Usage:
// <Greeting name="John" />
```

## State in Class Components
Unlike functional components that use useState hook, class components have a built-in state object.

class Counter extends Component {
  constructor(props) {
    super(props);
    // Initialize state in constructor
    this.state = {
      count: 0
    };
  }

  // Update state using setState method
  incrementCount = () => {
    this.setState({ count: this.state.count + 1 });
  }

  render() {
    return (
      <div>
        <p>Count: {this.state.count}</p>
        <button onClick={this.incrementCount}>Increment</button>
      </div>
    );
  }
}
```

### Important Notes about State:
1. Always use `setState()` to update state, never modify state directly
2. State updates may be asynchronous
3. State updates are merged

## Lifecycle Methods
Class components have several lifecycle methods that get called at different stages of a component's life.

### 1. Mounting Phase
class LifecycleDemo extends Component {
  constructor(props) {
    super(props);
    // Called when component is initialized
    this.state = { data: null };
  }

  componentDidMount() {
    // Called after component is mounted to the DOM
    // Perfect for API calls
    fetch('https://api.example.com/data')
      .then(response => response.json())
      .then(data => this.setState({ data }));
  }
}
```

### 2. Updating Phase
class UpdateDemo extends Component {
  shouldComponentUpdate(nextProps, nextState) {
    // Control if component should re-render
    return this.props.value !== nextProps.value;
  }

  componentDidUpdate(prevProps, prevState) {
    // Called after component updates
    if (this.props.userId !== prevProps.userId) {
      this.fetchUserData();
    }
  }
}
```

### 3. Unmounting Phase
class UnmountDemo extends Component {
  componentWillUnmount() {
    // Clean up (remove event listeners, cancel subscriptions)
    // Called right before component is removed from DOM
  }
}
```

## Complete Example with Multiple Features
class UserDashboard extends Component {
  constructor(props) {
    super(props);
    this.state = {
      user: null,
      posts: [],
      loading: true,
      error: null
    };
  }

  componentDidMount() {
    // Fetch user data when component mounts
    this.fetchUserData();
  }

  componentDidUpdate(prevProps) {
    // If userId prop changes, fetch new user data
    if (this.props.userId !== prevProps.userId) {
      this.fetchUserData();
    }
  }

  componentWillUnmount() {
    // Clean up any subscriptions/timers
    if (this.dataSubscription) {
      this.dataSubscription.unsubscribe();
    }
  }

  fetchUserData = async () => {
    try {
      const response = await fetch(`/api/users/${this.props.userId}`);
      const userData = await response.json();
      this.setState({ 
        user: userData,
        loading: false 
      });
    } catch (error) {
      this.setState({ 
        error: 'Failed to fetch user data',
        loading: false 
      });
    }
  }

  handleLogout = () => {
    this.setState({ user: null });
    this.props.onLogout();
  }

  render() {
    const { user, loading, error } = this.state;

    if (loading) return <div>Loading...</div>;
    if (error) return <div>Error: {error}</div>;
    if (!user) return <div>No user found</div>;

    return (
      <div className="dashboard">
        <h1>Welcome, {user.name}</h1>
        <div className="user-info">
          <p>Email: {user.email}</p>
          <p>Member since: {user.joinDate}</p>
        </div>
        <button onClick={this.handleLogout}>Logout</button>
      </div>
    );
  }
}
```

## Key Differences from Functional Components
1. Class components use `this` keyword to refer to the component instance
2. State is handled through a single `state` object and `setState` method
3. Lifecycle methods are available instead of hooks
4. Props are accessed through `this.props`
5. Event handlers typically need to be bound in constructor or used as arrow functions

## When to Use Class Components
While functional components with hooks are now preferred, you might still need class components when:
1. Working with legacy code
2. Using older libraries that depend on lifecycle methods
3. Working in codebases that standardized on class components
4. Need to use features that don't have hook equivalents (rare)

## Best Practices
1. Always initialize state in the constructor
2. Use `setState` for state updates
3. Bind event handlers in constructor or use arrow functions
4. Clean up subscriptions and event listeners in componentWillUnmount
5. Use shouldComponentUpdate for performance optimization
6. Keep render method pure
7. Don't call setState in componentDidMount unless necessary
